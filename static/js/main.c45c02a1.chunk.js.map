{"version":3,"sources":["components/Header.js","components/Memes.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","id","src","alt","style","fontSize","marginTop","Memes","handler","event","target","name","value","setState","handleSubmit","preventDefault","randNum","Math","floor","random","state","allMemeImgs","length","randMemeImg","url","randomImg","topText","bottomText","bind","fetch","then","response","json","memes","data","console","log","onSubmit","this","forhtml","type","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OA0BeA,MAxBf,WACE,OACE,yBAAKC,UAAU,kBAAkBC,GAAG,UAClC,yBAAKD,UAAU,OACb,yBAAKA,UAAU,aACb,yBACEA,UAAU,2BACVE,IAAI,iEACJC,IAAI,cAGR,yBAAKH,UAAU,YACb,uBACEA,UAAU,yBACVI,MAAO,CAAEC,SAAU,MAAOC,UAAW,SAFvC,sB,iDCmEKC,E,YA9Eb,aAAe,IAAD,8BACZ,+CAWFC,QAAU,SAAAC,GAAU,IAAD,EACOA,EAAMC,OAAtBC,EADS,EACTA,KAAMC,EADG,EACHA,MACd,EAAKC,SAAL,eAAiBF,EAAOC,KAdZ,EAiBdE,aAAe,SAAAL,GACbA,EAAMM,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,YAAYC,QAC5DC,EAAc,EAAKH,MAAMC,YAAYL,GAASQ,IACpD,EAAKX,SAAS,CAAEY,UAAWF,KAnB3B,EAAKH,MAAQ,CACXM,QAAS,GACTC,WAAY,GACZF,UAAW,gCACXJ,YAAa,IAEf,EAAKb,QAAU,EAAKA,QAAQoB,KAAb,gBACf,EAAKd,aAAe,EAAKA,aAAac,KAAlB,gBATR,E,iFAwBO,IAAD,OAClBC,MAAM,qCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACTE,EAAUF,EAASG,KAAnBD,MACRE,QAAQC,IAAIH,GACZ,EAAKpB,SAAS,CAAEQ,YAAaY,IAC7BE,QAAQC,IAAI,EAAKhB,MAAMC,YAAY,S,+BAKvC,OACE,yBAAKrB,UAAU,YACb,0BAAMA,UAAU,MAAMqC,SAAUC,KAAKxB,cACnC,2BAAOyB,QAAQ,WAAf,cACA,2BACEvC,UAAU,eACVwC,KAAK,OACL7B,KAAK,UACLV,GAAG,UACHW,MAAO0B,KAAKlB,MAAMM,QAClBe,SAAUH,KAAK9B,UAEjB,2BAAO+B,QAAQ,cAAf,iBACA,2BACEvC,UAAU,eACVwC,KAAK,OACL7B,KAAK,aACLV,GAAG,aACHW,MAAO0B,KAAKlB,MAAMO,WAClBc,SAAUH,KAAK9B,UAEjB,6BACA,4BAAQR,UAAU,iCAAlB,aAEF,6BAEA,yBAAKA,UAAU,yBACb,yBACEC,GAAG,OACHC,IAAKoC,KAAKlB,MAAMK,UAChBtB,IAAI,GACJH,UAAU,oBAGZ,wBAAIA,UAAU,uBAAuBsC,KAAKlB,MAAMM,SAChD,wBAAI1B,UAAU,uBAAuBsC,KAAKlB,MAAMO,kB,GAxEtCe,a,YCaLC,MATf,WACE,OACE,yBAAK3C,UAAU,iBAAiBC,GAAG,WACjC,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.c45c02a1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"container-fluid\" id=\"header\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4 \">\r\n          <img\r\n            className=\"img-responsive img-fluid\"\r\n            src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n            alt=\"Problem?\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-8\">\r\n          <p\r\n            className=\"text-white text-center\"\r\n            style={{ fontSize: \"6vw\", marginTop: \"10vh\" }}\r\n          >\r\n            Meme Generator\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Memes extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      topText: \"\",\r\n      bottomText: \"\",\r\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n      allMemeImgs: []\r\n    };\r\n    this.handler = this.handler.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handler = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\r\n    const randMemeImg = this.state.allMemeImgs[randNum].url;\r\n    this.setState({ randomImg: randMemeImg });\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        const { memes } = response.data;\r\n        console.log(memes);\r\n        this.setState({ allMemeImgs: memes });\r\n        console.log(this.state.allMemeImgs[0]);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"bg-white\">\r\n        <form className=\"p-4\" onSubmit={this.handleSubmit}>\r\n          <label forhtml=\"topText\">Top Text :</label>\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            name=\"topText\"\r\n            id=\"topText\"\r\n            value={this.state.topText}\r\n            onChange={this.handler}\r\n          />\r\n          <label forhtml=\"bottomText\">Bottom Text :</label>\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            name=\"bottomText\"\r\n            id=\"bottomText\"\r\n            value={this.state.bottomText}\r\n            onChange={this.handler}\r\n          />\r\n          <br />\r\n          <button className=\"btn btn-block btn-danger lead\">Generate</button>\r\n        </form>\r\n        <br />\r\n\r\n        <div className=\"thumbnail text-center\">\r\n          <img\r\n            id=\"imgg\"\r\n            src={this.state.randomImg}\r\n            alt=\"\"\r\n            className=\"mx-auto d-block\"\r\n          />\r\n\r\n          <h1 className=\"text-white caption1\">{this.state.topText}</h1>\r\n          <h1 className=\"text-white caption2\">{this.state.bottomText}</h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Memes;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Memes from \"./components/Memes\";\nimport bootstrap from \"bootstrap/dist/css/bootstrap.css\";\nimport \"./style.css\";\n\nfunction App() {\n  return (\n    <div className=\"card bg-danger\" id=\"wrapper\">\n      <Header />\n      <Memes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}